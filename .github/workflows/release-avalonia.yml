name: Release Avalonia Desktop

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual trigger from GitHub Actions tab

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'SubdomainScanner.Avalonia/SubdomainScanner.Avalonia.csproj'
  APP_NAME: 'SubdomainScanner'

jobs:
  build-windows:
    name: Build Windows x64
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build and Publish
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} `
            -c Release `
            -r win-x64 `
            --self-contained `
            -p:PublishSingleFile=false `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -o ./publish/win-x64

      - name: Create Windows Archive
        run: |
          Compress-Archive -Path ./publish/win-x64/* -DestinationPath ${{ env.APP_NAME }}-win-x64.zip

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: ${{ env.APP_NAME }}-win-x64.zip
          retention-days: 7

  build-linux:
    name: Build Linux x64
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build and Publish
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            -c Release \
            -r linux-x64 \
            --self-contained \
            -p:PublishSingleFile=false \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -o ./publish/linux-x64

      - name: List published files (debug)
        run: ls -la ./publish/linux-x64

      - name: Make executable
        run: |
          chmod +x ./publish/linux-x64/SubdomainScanner.Avalonia || true
          chmod +x ./publish/linux-x64/${{ env.APP_NAME }} || true

      - name: Create Linux Archive
        run: |
          cd ./publish/linux-x64
          tar -czf ../../${{ env.APP_NAME }}-linux-x64.tar.gz *
          cd ../..

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: ${{ env.APP_NAME }}-linux-x64.tar.gz
          retention-days: 7

  build-macos:
    name: Build macOS Universal
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build and Publish (x64)
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            -c Release \
            -r osx-x64 \
            --self-contained \
            -p:PublishSingleFile=false \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -o ./publish/osx-x64

      - name: Build and Publish (ARM64)
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            -c Release \
            -r osx-arm64 \
            --self-contained \
            -p:PublishSingleFile=false \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -o ./publish/osx-arm64

      - name: Create macOS x64 Archive
        run: |
          cd ./publish/osx-x64
          tar -czf ../../${{ env.APP_NAME }}-macos-x64.tar.gz *
          cd ../..

      - name: Create macOS ARM64 Archive
        run: |
          cd ./publish/osx-arm64
          tar -czf ../../${{ env.APP_NAME }}-macos-arm64.tar.gz *
          cd ../..

      - name: Upload macOS x64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64
          path: ${{ env.APP_NAME }}-macos-x64.tar.gz
          retention-days: 7

      - name: Upload macOS ARM64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: ${{ env.APP_NAME }}-macos-arm64.tar.gz
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Get version from tag
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=dev-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          fi

      - name: Create Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # SubdomainScanner Desktop - ${{ steps.get_version.outputs.VERSION }}

          ## 🎨 Modern Cross-Platform Desktop Application

          Built with **Avalonia UI** and **Nuxt UI** inspired design system.

          ### ✨ Features

          - 🎯 **2-Column Layout** - Configuration on left, Results & Logs always visible on right
          - 🔄 **Real-time Scanning** - Live progress updates with auto-scrolling logs
          - 📊 **Compact Statistics** - 2×2 grid showing total subdomains, resolved hosts, scan time, active sources
          - 🎨 **Modern Design** - Green #22c55e primary color, Slate gray palette
          - 🌓 **Dark/Light Theme** - Toggle with animated theme switcher
          - ✨ **Smooth Animations** - Hover effects, scale transforms, smooth transitions
          - 📋 **Copy to Clipboard** - Native clipboard integration
          - 🔍 **6 Data Sources** - crt.sh, HackerTarget, Wayback Machine, AlienVault OTX, ThreatCrowd, CommonCrawl
          - 🌐 **DNS Resolution** - Optional IP address verification

          ### 📦 Downloads

          | Platform | Architecture | Download |
          |----------|--------------|----------|
          | Windows | x64 | \`SubdomainScanner-win-x64.zip\` |
          | Linux | x64 | \`SubdomainScanner-linux-x64.tar.gz\` |
          | macOS | Intel (x64) | \`SubdomainScanner-macos-x64.tar.gz\` |
          | macOS | Apple Silicon (ARM64) | \`SubdomainScanner-macos-arm64.tar.gz\` |

          ### 🚀 Installation

          **Windows:**
          1. Download \`SubdomainScanner-win-x64.zip\`
          2. Extract the archive
          3. Run \`SubdomainScanner.exe\`

          **Linux:**
          1. Download \`SubdomainScanner-linux-x64.tar.gz\`
          2. Extract: \`tar -xzf SubdomainScanner-linux-x64.tar.gz\`
          3. Make executable: \`chmod +x SubdomainScanner\`
          4. Run: \`./SubdomainScanner\`

          **macOS:**
          1. Download the appropriate archive for your Mac (x64 for Intel, arm64 for Apple Silicon)
          2. Extract: \`tar -xzf SubdomainScanner-macos-*.tar.gz\`
          3. Run: \`./SubdomainScanner\`

          ### ⚠️ Ethical Use

          This tool is intended for **defensive security purposes only**:
          - ✅ Authorized penetration testing
          - ✅ Security audit of your own domains
          - ✅ Cybersecurity research
          - ❌ Unauthorized scanning
          - ❌ Malicious reconnaissance

          ### 🔧 Requirements

          - No additional dependencies required (self-contained)
          - .NET 9.0 runtime included

          ---

          **Author:** Nicolas ESTEBE / devestebe@gmail.com
          **License:** Educational project - Responsible use only
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: SubdomainScanner Desktop ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'dev-') }}
          files: |
            ./artifacts/windows-x64/*.zip
            ./artifacts/linux-x64/*.tar.gz
            ./artifacts/macos-x64/*.tar.gz
            ./artifacts/macos-arm64/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
